
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]

#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \usepackage{CJKutf8}

#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[scale=0.75,twoside,bindingoffset=5mm]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}





* Regular Expression

** source-folder
   Lecture-004-RegeX

** [괄호 안의 문자 하나와 매치], {개수를 지정하는 매치}

** 정규식을 이해하기 위한 기본 아스키코드값 

   #+CAPTION: ASCII CODE MUST HAVE
   #+ATTR_HTML: :border 2 :rules all :frame border
   #+ATTR_LaTeX: :align |c|c|c|
   | Dec | character |
   |-----+-----------|
   |  48 | 0         |
   |  65 | A         |
   |  97 | a         |
   |   0 | null      |

   더 자세히는 다음 링크를 참고 하면 된다. 

   http://www.asciitable.com/index/asciifull.gif

** Regex의 필요성

우리가 회원가입을 할 때 특정 형태의 String을 구별 해야 할 필요가 있다. 최근에 암호의 복잡성이 대두되면서 (아마도 몇몇 엄청난 해킹 사건 때문이리라) 사용자 가입시에 암호를 체크하는 모듈이 구성이 되어 있는데, stdio.


** 설명
   
*** 그림으로 간단히 이해하는 ReGex



    #+CAPTION: 출처 : 참고 문헌 1
    #+ATTR_HTML: width "100px"
    #+ATTR_ORG: width 100
    [[/Users/nk/Dropbox/App/001-ORGMODE/Image/2016-12-20319.png]]

   

    #+CAPTION: 출처 : 참고 문헌 2
    #+ATTR_HTML: width "100px"
    #+ATTR_ORG: width 100
    [[/Users/nk/Dropbox/App/001-ORGMODE/Image/2016-12-20319.png]]



    #+CAPTION: 출처 : 참고 문헌 3
    #+ATTR_HTML: width "100px"
    #+ATTR_ORG: width 100
    [[/Users/nk/Dropbox/App/001-ORGMODE/Image/2016-12-20319-2.png]]

 

** 연습문제

*** Password를 체크하는 module

    - user_passwd_re.py


   
*** 소문자 찾기
    #+BEGIN_SRC python
    text="My id Number is tommy karo and password is #1234ABCDE@it.is"
    a=re.findall("[a-z]",text)
    print(a) 
    #result
    ['y', 'i', 'd', 'u', 'm', 'b', 'e', 'r', 'i', 's', 't', 'o', 'm', 'm', 'y', 'k',
    'a', 'r', 'o', 'a', 'n', 'd', 'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 'i', 's', 'i', 't', 'i', 's']
    #+END_SRC

*** 대문자 찾기
    #+BEGIN_SRC python
    #2 대문자를 찾아보자

    a=re.findall("[A-Z]", text)
    print(a)


    #+END_SRC
*** 소문자 연속해서 찾기 
   #+BEGIN_SRC python
   #3 소문자 연속해서 찾기

   a=re.findall("[a-z]{1,}", text)
   print(a)


   #+END_SRC 
*** 영문자/숫자가 아닌 기호 찾기
    #+BEGIN_SRC python
     #4 영문자 숫자가 아닌 기호 찻기, space를 제외한다. 
     a=re.findall("[^a-zA-Z0-9\s]", text)
     print(a)

 
    #+END_SRC

*** Regular Expression을 이용해서 password validator를 만들어 보자

    - 암호는 대소문자숫자,특수문자를 포함해서 6~12자리로 구성된다.
    - 추가로 취약한 암호의 dictionary를 만들어서 그 암호는 거부하게 만든다. 

#+BEGIN_SRC python
import re as regex
def pwd_validator(pwd):
    """
    Password를 체크 한다.
  

    Input : String
    Return : false or True

    """


    # 6~12자가 되도록 변경한다

    if(len(regex.findall("[a-zA-Z0-9]{6,13}", pwd))==0):
        print("too short password")
        return False
    #대소문자가 적어도 하나씩은 포함 되어야 한다
    if(len(regex.findall("[a-z]+",pwd))==0 or len(regex.findall("[A-Z]", pwd))==0):
        print("at least 1 of Capital")
        return False

    return true
#+END_SRC

** 참고문헌 


- [[http://www.nextree.co.kr/p4327/][정규표현식(Regular Expression)을 소개합니다.]]
- [[https://regexper.com/][테스트 해볼 수 있는 사이트 Regexper]]
- 연습해볼 수 있는 사이트 https://regexone.com/lesson/
