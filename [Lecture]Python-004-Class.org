
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]

#+LATEX_HEADER: \usepackage{kotex}
#+LATEX_HEADER: \usepackage{CJKutf8}

#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[scale=0.75,twoside,bindingoffset=5mm]{geometry}
#+LATEX_HEADER: \usepackage[onehalfspacing]{setspace}



* Object Oriented Programming

- Python의 클래스는 그 자체로 네임스페이스이다. 즉 메서드를 바로 호출 할 수 있다. 

  
** Make Class

Python의 기본 dataType은 모두 object의 형태를 띄고 있다. (#1)을 통해서 확인 해보면 다음과 같다. 



** Class Definition

class name:
   variable1
   variable2
   def funtion1(self):
       statement1

Class 내부에서 함수(method)를 정의할 때 인스턴스 생성후에 사용하는 method의 경우 가장 첫번째 인자는 self를 주어야 한다. 



#+BEGIN_SRC python

#3
class Car:
    def __init__(self, name, color, speed):
        self.name=name
        self.color=color
        self.speed=speed

    def print_car(self):
        print("(name, color, speed)=(",self.name,",",self.color,",",self.speed,")")
    def print():
        print("this is no parameter")

##   bus=Car() errror
bus=Car("bmw", "RED","200")
Car.print() #this is not error


#+END_SRC


** call method

- class.method
- instance.method

만약에 instance method의 형태로 call을 할 경우 함수는 반드시 다음과 같이 정의 되어 있어야 한다. 여기에서 self를 생략하면 instance형태로 call을 할 때 에러가 발생한다. 




#+BEGIN_SRC python
def function(self, param1, param2.....):
    statement1
#+END_SRC

** class variable, instance variable
- 클래스변수는 instance간에 공유한다.

- instance variable은 instance간에 공유하지 않는다. 

 #+BEGIN_SRC python
 #4
class Car:
    manufacture="Tesla"
    def __init__(self, name, color, speed):
        self.name=name
        self.color=color
        self.speed=speed

    def print_car(self):
        print("(manufacture,name, color, speed)=(",self.manufacture,",",self.name,",",self.color,",",self.speed,")")
    def print():
        print("this is no parameter")

## instance 생성후 telsa를 출력한다.
car1=Car("matiz","red",100)
car2=Car("benz","gold", 300)
car1.print_car()
car2.print_car()
## Class variable을 변경한다.
Car.manufacture="BMW"
car1.print_car()
car2.print_car()
## Instance Variable을 변경한다.
car1.name="this is change"
car1.print_car()
car2.print_car()
================result===============
(manufacture,name, color, speed)=( Tesla , matiz , red , 100 )
(manufacture,name, color, speed)=( Tesla , benz , gold , 300 )
(manufacture,name, color, speed)=( BMW , matiz , red , 100 )
(manufacture,name, color, speed)=( BMW , benz , gold , 300 )
(manufacture,name, color, speed)=( BMW , this is change , red , 100 )
(manufacture,name, color, speed)=( BMW , benz , gold , 300 )
 #+END_SRC


** Class Variable 은닉하기

*** __name과 같은 형태로 쓴다.  

우선 Class내부에 은닉되어 있는 class variable을 호출해보자. 

#5 
#+BEGIN_SRC python
print(dir(Car))

#======result========
['__class__', '__delattr__', '__dict__', '__dir__', 
'__doc__', '__eq__', '__format__', '__ge__', '__getattribute__'
, '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__'
, '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',
 '__setattr__', '__sizeof__', '__str__', '__subclasshook__',
 '__weakref__', 'manufacture', 'print', 'print_car']
#+END_SRC

*** setter getter를 통한 호출 
- 예제 코드 #6
#+BEGIN_SRC python


#6 Setter / Getter

class Car:
    __manufacture="Tesla"
    def __init__(self, name, color, speed):
        self.name=name
        self.color=color
        self.speed=speed

    def set_manufacture(self, manufacture):
        self.__manufacture=manufacture
    def get_manufacture(self, manufacture):
        return self.__manufacture
        
    def print_car(self):
        print("(manufacture,name, color, speed)=(",self.manufacture,",",self.name,",",self.color,",",self.speed,")")
    def print():



#+END_SRC



*** Inheritance


- 예제 코드 #7 super class의 __init__이용하기

#+BEGIN_SRC python
#7 Inheritance
class Car:
    manufacture="Tesla"
    def __init__(self, name, color):
        self.name=name
        self.color=color
        
    def print_car(self):
        print("(manufacture,name, color, speed)=(",self.manufacture,",",self.name,",",self.color,")")


class SuperCar(Car):
    def __init__(self, name, color, turbo=True):
        super().__init__(name, color)
        self.turbo=turbo

    def print_car(self):#method overridding
        print("(name, color, manufacture, turbo)=(",self.name, ",", self.color,",", self.manufacture,",", self.turbo,")" )

taxi=Car("taxi","red")
bus=Car("bus", "yellow")
ferrari=SuperCar("ferrari", "red", False)

## super class
print("## superclass")
print(taxi.print_car())

## sub class
print("## sub class")
print(ferrari.print_car())

## super class file
print(SuperCar.__bases__)





# result ==============
## superclass
(manufacture,name, color, speed)=( Tesla , taxi , red )
None
## sub class
(name, color, manufacture, turbo)=( ferrari , red , Tesla , False )
None
(<class '__main__.Car'>,)
#+END_SRC

- 예제 코드 #7.1 __init__재정의 하기 

#+BEGIN_SRC python
class SuperCar(Car):
    def __init__(self, name, color, turbo=True):
        self.name=name
        self.color=color
        self.turbo=turbo
#+END_SRC

- 예제 코드 #8 

#+BEGIN_SRC python
# 8
class programmer:
    def __init__(self, name):
        self.name=name
    def coding(self):
        print(self.name+"is developer")


class javaProgrammer(programmer):
    def coding(self):
        print(self.name+"is java programmer")

class CProgrammer(programmer):
    def coding(self):
        print(self.name+"is C programmer")


InstanceOfprogrammer=programmer("min")
javaProgrammer=javaProgrammer("lee")
CPro=CProgrammer("kim")

InstanceOfprogrammer.coding()
javaProgrammer.coding()
CPro.coding()

# ======result ======
minis developer
leeis java programmer
kimis C programmer
#+END_SRC


